파일 확장자
	해당 파일이 어떤 파일인지 알려주는 역할
	파일마다 정해져 있다.
	보기 --> 파일 확장자 체크

GUI(Graphic User Interface)
	사용자가 편히 사용할 수 있도록 버튼이나 아이콘과 같은 그래픽 기반의 사용환경

CLI(Command Line Interface)
	명령어 기반 사용환경

소스트리(source tree)
	git을 쉽게 사용할 수 있도록 도와주는 외부 gui tool

git의 공간 분리
	동작과 코드작성 이력을 효율적으로 처리하기 위해서 저장공간을 논리적으로 분리
	작업공간(working directory/working tree)
	임시저장공간(stage)
	실질적으로 저장되고 기록되는 공간(repository)

1. 작업공간(working tree)
	작업을 하는 공간
	로컬저장소에 접근하여 파일을 생성, 수정 그리고 저장하는 공간
	스테이지(stage) 영역과 맞닿아 있다.

	작업공간에 새롭게 만들어진 파일들은 최초 모두 untracked 상태이다.
	따라서 해당 파일들을 수정 사항을 반영하고 싶다면 tracked 상태로 바꾸어 주어야 한다.
		
		git add 파일명(확장자까지)
		git add .

	해당 명령어를 실행하면 해당 파일이 tracked 상태로 변경, stage에 등록이 된다.

	GUI(sourcetree)에서는 파일 옆의 + 버튼을 클릭하면 tracked 상태로 변경이 되고, stage에 등록이 된다.

2. 임시저장공간(stage)
	tracked 된 파일들을 관리하는 영역
	작업공간과 연결되어 있다.
	tracked 된 파일들의 추적상태를 잠시 복사하여 저장한다.
	stage 영역에 저장된 파일들은 모두 tracked 상태가 된다.

	최종적인 파일의 변화를 영구적으로 저장하기 위해서는 모든 파일의 상태가 stage 상태가 되어야한다.
	unstage 상태는 스테이지 영역에 있는 파일과 working directory 안의 파일이 서로 차이가 있을때를 의미한다.

	stage에 올라가지 않은, 작업공간에 새롭게 만들어진 파일(untracked 파일)도 unstage 상태라고 할 수 있다.
	stage상태
	unstage 상태

	원붠과 수정본의 기록을 구분하기 위해 modified unmodified로 나누어 관리
	
	워킹 디렉토리
		tracked
			test.txt
				unmodified 상태	---> stage 상태
			test2.txt
				modified 상태		---> unstage 상태
		untracked
			text3.txt 어떤 상태라고도 말할 수 없다		---> unstage 상태

3. 실제 기록하여 저장하는 공간(repository)


*** 깃 명령어(cli에서 사용되는...)
	git으로 시작한다.
		git 깃명령어
	초기화 명령어(저장소 만들어줘!)
		git init
	track 상태로 바꿔줘
		git add .
	상태확인 명령어
		git status


































